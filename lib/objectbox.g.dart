// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'local.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6842210975242302255),
      name: 'LocalFeeds',
      lastPropertyId: const obx_int.IdUid(6, 6626495438340767886),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6849656226841093346),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5668916395174767199),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2092842999087627431),
            name: 'displayPhoto',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8800629278587603283),
            name: 'placeName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3713086786215796248),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6626495438340767886),
            name: 'mediaId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 4498916877701305346),
            relationTarget: 'LocalMedia')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7340218775056737007),
      name: 'LocalMedia',
      lastPropertyId: const obx_int.IdUid(7, 1420899237334268681),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7569320867247223113),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2064100042573143533),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1052037570686566775),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8680927903050473233),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6573163233639834849),
            name: 'feedsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 4001525891127492437),
            relationTarget: 'LocalFeeds'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3183542519932033831),
            name: 'width',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1420899237334268681),
            name: 'height',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 7340218775056737007),
      lastIndexId: const obx_int.IdUid(2, 4001525891127492437),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1084981166761161020],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        385441659790065265,
        3594963849072461618,
        6434635452987160935,
        482779788843750411,
        8389050526172515694
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    LocalFeeds: obx_int.EntityDefinition<LocalFeeds>(
        model: _entities[0],
        toOneRelations: (LocalFeeds object) => [object.media],
        toManyRelations: (LocalFeeds object) => {},
        getId: (LocalFeeds object) => object.id,
        setId: (LocalFeeds object, int id) {
          object.id = id;
        },
        objectToFB: (LocalFeeds object, fb.Builder fbb) {
          final displayNameOffset = fbb.writeString(object.displayName);
          final displayPhotoOffset = object.displayPhoto == null
              ? null
              : fbb.writeString(object.displayPhoto!);
          final placeNameOffset = fbb.writeString(object.placeName);
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, displayNameOffset);
          fbb.addOffset(2, displayPhotoOffset);
          fbb.addOffset(3, placeNameOffset);
          fbb.addOffset(4, textOffset);
          fbb.addInt64(5, object.media.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final displayPhotoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final placeNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = LocalFeeds(
              displayName: displayNameParam,
              displayPhoto: displayPhotoParam,
              placeName: placeNameParam,
              text: textParam,
              id: idParam);
          object.media.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.media.attach(store);
          return object;
        }),
    LocalMedia: obx_int.EntityDefinition<LocalMedia>(
        model: _entities[1],
        toOneRelations: (LocalMedia object) => [object.feeds],
        toManyRelations: (LocalMedia object) => {},
        getId: (LocalMedia object) => object.id,
        setId: (LocalMedia object, int id) {
          object.id = id;
        },
        objectToFB: (LocalMedia object, fb.Builder fbb) {
          final urlOffset = fbb.writeString(object.url);
          final typeOffset = fbb.writeString(object.type);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, thumbnailOffset);
          fbb.addInt64(4, object.feeds.targetId);
          fbb.addFloat64(5, object.width);
          fbb.addFloat64(6, object.height);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final heightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final thumbnailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = LocalMedia(
              id: idParam,
              url: urlParam,
              type: typeParam,
              width: widthParam,
              height: heightParam,
              thumbnail: thumbnailParam);
          object.feeds.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.feeds.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [LocalFeeds] entity fields to define ObjectBox queries.
class LocalFeeds_ {
  /// see [LocalFeeds.id]
  static final id =
      obx.QueryIntegerProperty<LocalFeeds>(_entities[0].properties[0]);

  /// see [LocalFeeds.displayName]
  static final displayName =
      obx.QueryStringProperty<LocalFeeds>(_entities[0].properties[1]);

  /// see [LocalFeeds.displayPhoto]
  static final displayPhoto =
      obx.QueryStringProperty<LocalFeeds>(_entities[0].properties[2]);

  /// see [LocalFeeds.placeName]
  static final placeName =
      obx.QueryStringProperty<LocalFeeds>(_entities[0].properties[3]);

  /// see [LocalFeeds.text]
  static final text =
      obx.QueryStringProperty<LocalFeeds>(_entities[0].properties[4]);

  /// see [LocalFeeds.media]
  static final media = obx.QueryRelationToOne<LocalFeeds, LocalMedia>(
      _entities[0].properties[5]);
}

/// [LocalMedia] entity fields to define ObjectBox queries.
class LocalMedia_ {
  /// see [LocalMedia.id]
  static final id =
      obx.QueryIntegerProperty<LocalMedia>(_entities[1].properties[0]);

  /// see [LocalMedia.url]
  static final url =
      obx.QueryStringProperty<LocalMedia>(_entities[1].properties[1]);

  /// see [LocalMedia.type]
  static final type =
      obx.QueryStringProperty<LocalMedia>(_entities[1].properties[2]);

  /// see [LocalMedia.thumbnail]
  static final thumbnail =
      obx.QueryStringProperty<LocalMedia>(_entities[1].properties[3]);

  /// see [LocalMedia.feeds]
  static final feeds = obx.QueryRelationToOne<LocalMedia, LocalFeeds>(
      _entities[1].properties[4]);

  /// see [LocalMedia.width]
  static final width =
      obx.QueryDoubleProperty<LocalMedia>(_entities[1].properties[5]);

  /// see [LocalMedia.height]
  static final height =
      obx.QueryDoubleProperty<LocalMedia>(_entities[1].properties[6]);
}
